/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marakana.contacts.repositories;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Contact;



/**
 * 
 * @author ֵגדום
 */
public class ContactsRepository {

	private final DataSource ds;

	public ContactsRepository() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context
						.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException ex) {
			throw new RuntimeException(ex);
		}
	}

	public void init() throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement
						.execute("create table contact (id integer generated by default as identity primary key,name varchar(255), addressId integer,foreign key(addressId) references address)");
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public List<Contact> findAll() throws SQLException {
		Connection conn = ds.getConnection();
		List<Contact> contacts = new ArrayList<Contact>();
		try {
			Statement statement = conn.createStatement();
			try {
				ResultSet result = statement
						.executeQuery("select * from contact");
				try {

					while (result.next()) {
						contacts.add(unmarshal(result));
					}
					return contacts;
				} finally {
					result.close();
				}

			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}

	}

	public Contact find(long id) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				ResultSet result = statement
						.executeQuery("select * from contact where id = " + id);
				if (!result.next()) {
					return null;
				} else {
					return unmarshal(result);
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public void create(Contact a) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement
						.executeUpdate(
								"insert into contact (name, addressId) values ('"
										+ a.getName() + "','"
										+ a.getAddressId() + "')",
								Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						a.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public void update(Contact a) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement.executeUpdate("update contact set name='"
						+ a.getName() + "', addressId='" + a.getAddressId()
						+ "' where id=" + a.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						a.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public void delete(Contact a) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement.executeUpdate("delete from contact where id="
						+ a.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						a.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	private static Contact unmarshal(ResultSet result) throws SQLException {
		Contact contact = new Contact();
		contact.setId(result.getLong("id"));
		contact.setName(result.getString("name"));
		contact.setAddressId(result.getLong("addressId"));
		return contact;
	}
}
