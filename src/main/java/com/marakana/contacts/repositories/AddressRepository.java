/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marakana.contacts.repositories;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Address;

/**
 * 
 * @author ֵגדום
 */
public class AddressRepository {

	private final DataSource ds;

	public AddressRepository() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context
						.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException ex) {
			throw new RuntimeException(ex);
		}
	}

	public void init() throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement
						.execute("create table address (id integer generated by default as identity primary key,street varchar(255), city varchar(255),state varchar(255),zip varchar(255))");
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public Address find(long id) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				ResultSet result = statement
						.executeQuery("select * from address where id = " + id);
				if (!result.next()) {
					return null;
				} else {
					return unmarshal(result);
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public void create(Address a) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement.executeUpdate(
						"insert into address (city, street, state, zip) values ('"
								+ a.getCity() + "','" + a.getStreet() + "','"
								+ a.getState() + "','" + a.getZip() + "')",
						Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						a.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public void update(Address a) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement.executeUpdate("update address set street='"
						+ a.getStreet() + "', city='" + a.getCity()
						+ "', state='" + a.getState() + "', zip='" + a.getZip()
						+ "' where id=" + a.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						a.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	public void delete(Address a) throws SQLException {
		Connection conn = ds.getConnection();
		try {
			Statement statement = conn.createStatement();
			try {
				statement.executeUpdate("delete from address where id="
						+ a.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						a.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			conn.close();
		}
	}

	private static Address unmarshal(ResultSet result) throws SQLException {
		Address address = new Address();
		address.setId(result.getLong("id"));
		address.setStreet(result.getString("street"));
		address.setCity(result.getString("city"));
		address.setState(result.getString("state"));
		address.setZip(result.getString("zip"));
		return address;
	}
}
